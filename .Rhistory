# Hunter Dubbs
# CIT460
# Final Project
# PA Agriculture Data Analysis
if(!"dplyr" %in% installed.packages()) install.packages("dplyr")
if(!"devtools" %in% installed.packages()) install.packages("devtools")
if(!"mapproj" %in% installed.packages()) install.packages("mapproj")
if(!"ggplot2" %in% installed.packages()) install.packages("ggplot2")
if(!"shiny" %in% installed.packages()) install.packages("shiny")
if(!"rsconnect" %in% installed.packages()) install.packages("rsconnect")
library(dplyr)
library(ggplot2)
library(devtools)
library(mapproj)
devtools::install_github("wmurphyrd/fiftystater")
library(fiftystater)
data("fifty_states")
library(shiny)
library(rsconnect)
#setup rsconnect to put shiny app on shinyapps.io
rsconnect::setAccountInfo(name='hunterdubbs', token='9AA5C56FB7C71A0C4AA4D4516E40D3E8', secret='YrzDe20vjacFsMoXxJe+RrrqouZ/F2pRm3MCr7uG')
#prevent numbers from being displayed in scientific notation
options("scipen"=10)
#data source: USDA National Agriculte Statistics Service - 2017 Census of Agriculture
# https://www.nass.usda.gov/Publications/AgCensus/2017/Online_Resources/Census_Data_Query_Tool/2017_cdqt_data.txt.gz
raw2017 <- read.table("2017_cdqt_data.txt", header=T, sep="\t", stringsAsFactors=F)
attach(raw2017)
#The raw data file has 7 million rows, but I am only interested in certain portions of the data
#pass useful columns to dataframe
df2017 <- data.frame(
description=raw2017[[7]],
state=tolower(raw2017[[11]]),
value=raw2017[[15]],
chapter=raw2017[[1]],
table=raw2017[[2]],
rowId=raw2017[[3]],
subrowId=raw2017[[4]],
sector=raw2017[[5]],
subcat=raw2017[[14]],
stringsAsFactors=F
)
#remove rows of breakdown by acreage, county data, bearing vs non-bearing, and non-crops
df2017 <- df2017[df2017$chapter==1 & df2017$subcat=="" & df2017$sector=="CROPS" & df2017$subrowId<3, c(1,2,3,5,7)]
#convert values to integer data type
df2017$value <- as.integer(gsub(',', '', df2017$value))
#subrowID - 1 indicates num of operations - 2 indicates acreage
#shiny UI
ui <- fluidPage(
titlePanel("US Agriculure by Product"),
h6("Visualization by Hunter Dubbs for CIT460 at Penn College"),
sidebarLayout(
sidebarPanel(
helpText("Select an agricultural product"),
selectInput("product", h3("Product"),
choices=list("Total Non-Citrus Fruit"="NON-CITRUS TOTALS",
"Apples"="APPLES",
"Bananas"="BANANAS",
"Cherries"="CHERRIES",
"Peaches"="PEACHES",
"Oranges"="ORANGES",
"Almonds"="ALMONDS",
"Total Vegetables"="VEGETABLE TOTALS",
"Potatoes"="POTATOES",
"Spinach"="SPINACH",
"Tomatoes"="TOMATOES"),
selected="APPLES"
),
radioButtons("chartSelect", h3("Data"),
choices=list("Number of Operations"=1,
"Acreage"=2,
"Operations vs Acreage"=3),
selected=1)
),
mainPanel(
plotOutput(outputId="plotDisp")
)
),
h6("Data courtesy of UDSA : https://www.nass.usda.gov/Publications/AgCensus/2017")
)
server <- function(input, output){
selection <- reactive({
filter(df2017,
table %in% c(36, 37) &
state!="us total" &
description==input$product)
})
output$plotDisp <- renderPlot({
if(input$chartSelect==3){
#acreage vs operations chart
combinedData <- data.frame(
state=selection()$state,
ops=selection()[selection()$subrowId==1, ]$value,
acres=selection()[selection()$subrowId==2, ]$value
)
ggplot(combinedData, aes(x=ops, y=acres)) +
geom_point(aes(col="red")) +
labs(title=paste("Acres vs Number of Operations for", input$product, "in States"),
subtitle="2017 Census of Agriculture")
}else{
#acreage or operations chart
if(input$chartSelect==1){
prefix <- "Number of Operations"
}else{
prefix <- "Acres"
}
ggplot(selection()[selection()$subrowId==input$chartSelect, ], aes(map_id=state)) +
geom_map(aes(fill=value), map=fifty_states) +
expand_limits(x=fifty_states$long, y=fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="", y="") +
theme(legend.position="right", panel.background=element_blank()) +
labs(title=paste(prefix, "for", input$product, "by State"),
subtitle="2017 Census of Agriculture", caption="Gray states indicate non-zero values not disclosed by the USDA.")
}
})
}
shinyApp(ui, server)
#runApp()
#deployApp()
deployApp()
deployApp()
deployApp()
if(!"dplyr" %in% installed.packages()) install.packages("dplyr")
if(!"devtools" %in% installed.packages()) install.packages("devtools")
if(!"mapproj" %in% installed.packages()) install.packages("mapproj")
if(!"ggplot2" %in% installed.packages()) install.packages("ggplot2")
if(!"shiny" %in% installed.packages()) install.packages("shiny")
if(!"rsconnect" %in% installed.packages()) install.packages("rsconnect")
library(dplyr)
library(ggplot2)
library(devtools)
library(mapproj)
#devtools::install_github("wmurphyrd/fiftystater")
library(fiftystater)
data("fifty_states")
library(shiny)
library(rsconnect)
#setup rsconnect to put shiny app on shinyapps.io
rsconnect::setAccountInfo(name='hunterdubbs', token='9AA5C56FB7C71A0C4AA4D4516E40D3E8', secret='YrzDe20vjacFsMoXxJe+RrrqouZ/F2pRm3MCr7uG')
#prevent numbers from being displayed in scientific notation
options("scipen"=10)
raw2017 <- read.table("2017_cdqt_data.txt", header=T, sep="\t", stringsAsFactors=F)
attach(raw2017)
#The raw data file has 7 million rows, but I am only interested in certain portions of the data
#pass useful columns to dataframe
df2017 <- data.frame(
description=raw2017[[7]],
state=tolower(raw2017[[11]]),
value=raw2017[[15]],
chapter=raw2017[[1]],
table=raw2017[[2]],
rowId=raw2017[[3]],
subrowId=raw2017[[4]],
sector=raw2017[[5]],
subcat=raw2017[[14]],
stringsAsFactors=F
)
#remove rows of breakdown by acreage, county data, bearing vs non-bearing, and non-crops
df2017 <- df2017[df2017$chapter==1 & df2017$subcat=="" & df2017$sector=="CROPS" & df2017$subrowId<3, c(1,2,3,5,7)]
#convert values to integer data type
df2017$value <- as.integer(gsub(',', '', df2017$value))
#shiny UI
ui <- fluidPage(
titlePanel("US Agriculure by Product"),
h6("Visualization by Hunter Dubbs for CIT460 at Penn College"),
sidebarLayout(
sidebarPanel(
helpText("Select an agricultural product"),
selectInput("product", h3("Product"),
choices=list("Total Non-Citrus Fruit"="NON-CITRUS TOTALS",
"Apples"="APPLES",
"Bananas"="BANANAS",
"Cherries"="CHERRIES",
"Peaches"="PEACHES",
"Oranges"="ORANGES",
"Almonds"="ALMONDS",
"Total Vegetables"="VEGETABLE TOTALS",
"Potatoes"="POTATOES",
"Spinach"="SPINACH",
"Tomatoes"="TOMATOES"),
selected="APPLES"
),
radioButtons("chartSelect", h3("Data"),
choices=list("Number of Operations"=1,
"Acreage"=2,
"Operations vs Acreage"=3),
selected=1)
),
mainPanel(
plotOutput(outputId="plotDisp")
)
),
h6("Data courtesy of UDSA : https://www.nass.usda.gov/Publications/AgCensus/2017")
)
server <- function(input, output){
selection <- reactive({
filter(df2017,
table %in% c(36, 37) &
state!="us total" &
description==input$product)
})
output$plotDisp <- renderPlot({
if(input$chartSelect==3){
#acreage vs operations chart
combinedData <- data.frame(
state=selection()$state,
ops=selection()[selection()$subrowId==1, ]$value,
acres=selection()[selection()$subrowId==2, ]$value
)
ggplot(combinedData, aes(x=ops, y=acres)) +
geom_point(aes(col="red")) +
labs(title=paste("Acres vs Number of Operations for", input$product, "in States"),
subtitle="2017 Census of Agriculture")
}else{
#acreage or operations chart
if(input$chartSelect==1){
prefix <- "Number of Operations"
}else{
prefix <- "Acres"
}
ggplot(selection()[selection()$subrowId==input$chartSelect, ], aes(map_id=state)) +
geom_map(aes(fill=value), map=fifty_states) +
expand_limits(x=fifty_states$long, y=fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="", y="") +
theme(legend.position="right", panel.background=element_blank()) +
labs(title=paste(prefix, "for", input$product, "by State"),
subtitle="2017 Census of Agriculture", caption="Gray states indicate non-zero values not disclosed by the USDA.")
}
})
}
shinyApp(ui, server)
deployApp()
#shiny UI
ui <- fluidPage(
titlePanel("US Agriculure by Product"),
h6("Visualization by Hunter Dubbs for CIT460 at Penn College"),
sidebarLayout(
sidebarPanel(
helpText("Select an agricultural product"),
selectInput("product", h3("Product"),
choices=list("Total Non-Citrus Fruit"="NON-CITRUS TOTALS",
"Apples"="APPLES",
"Bananas"="BANANAS",
"Cherries"="CHERRIES",
"Peaches"="PEACHES",
"Oranges"="ORANGES",
"Almonds"="ALMONDS",
"Total Vegetables"="VEGETABLE TOTALS",
"Potatoes"="POTATOES",
"Spinach"="SPINACH",
"Tomatoes"="TOMATOES"),
selected="APPLES"
),
radioButtons("chartSelect", h3("Data"),
choices=list("Number of Operations"=1,
"Acreage"=2,
"Operations vs Acreage"=3),
selected=1)
),
mainPanel(
plotOutput(outputId="plotDisp")
)
),
h6("Data courtesy of UDSA : https://www.nass.usda.gov/Publications/AgCensus/2017")
)
server <- function(input, output){
# --- STEP 3 --- Information Extraction --- #
selection <- reactive({
filter(df2017,
table %in% c(36, 37) &
state!="us total" &
description==input$product)
})
output$plotDisp <- renderPlot({
# --- STEP 4 --- Information Presentation --- #
if(input$chartSelect==3){
#acreage vs operations chart
combinedData <- data.frame(
state=selection()$state,
ops=selection()[selection()$subrowId==1, ]$value,
acres=selection()[selection()$subrowId==2, ]$value
)
ggplot(combinedData, aes(x=ops, y=acres)) +
geom_point(aes(col="red")) +
labs(title=paste("Acres vs Number of Operations for", input$product, "in States"),
subtitle="2017 Census of Agriculture", x="Number of Operations", y="Acreage")
}else{
#acreage or operations chart
if(input$chartSelect==1){
prefix <- "Number of Operations"
}else{
prefix <- "Acres"
}
ggplot(selection()[selection()$subrowId==input$chartSelect, ], aes(map_id=state)) +
geom_map(aes(fill=value), map=fifty_states) +
expand_limits(x=fifty_states$long, y=fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="", y="") +
theme(legend.position="right", panel.background=element_blank()) +
labs(title=paste(prefix, "for", input$product, "by State"),
subtitle="2017 Census of Agriculture", caption="Gray states indicate non-zero values not disclosed by the USDA.")
}
})
}
shinyApp(ui, server)
deployApp()
if(!"dplyr" %in% installed.packages()) install.packages("dplyr")
if(!"devtools" %in% installed.packages()) install.packages("devtools")
if(!"mapproj" %in% installed.packages()) install.packages("mapproj")
if(!"ggplot2" %in% installed.packages()) install.packages("ggplot2")
if(!"shiny" %in% installed.packages()) install.packages("shiny")
if(!"rsconnect" %in% installed.packages()) install.packages("rsconnect")
library(dplyr)
library(ggplot2)
library(devtools)
library(mapproj)
devtools::install_github("wmurphyrd/fiftystater")
library(fiftystater)
data("fifty_states")
library(shiny)
library(rsconnect)
#setup rsconnect to put shiny app on shinyapps.io
#rsconnect::setAccountInfo(name='hunterdubbs', token='9AA5C56FB7C71A0C4AA4D4516E40D3E8', secret='REDACTED')
#prevent numbers from being displayed in scientific notation
options("scipen"=10)
# --- STEP 1 --- Data Gathering --- #
#data source: USDA National Agriculte Statistics Service - 2017 Census of Agriculture
# https://www.nass.usda.gov/Publications/AgCensus/2017/Online_Resources/Census_Data_Query_Tool/2017_cdqt_data.txt.gz
raw2017 <- read.table("2017_cdqt_data.txt", header=T, sep="\t", stringsAsFactors=F)
attach(raw2017)
# --- STEP 2 --- Data Wrangling --- #
#The raw data file has 7 million rows, but I am only interested in certain portions of the data
#pass useful columns to dataframe
df2017 <- data.frame(
description=raw2017[[7]],
state=tolower(raw2017[[11]]),
value=raw2017[[15]],
chapter=raw2017[[1]],
table=raw2017[[2]],
rowId=raw2017[[3]],
subrowId=raw2017[[4]],
sector=raw2017[[5]],
subcat=raw2017[[14]],
stringsAsFactors=F
)
#remove rows of breakdown by acreage, county data, bearing vs non-bearing, and non-crops
df2017 <- df2017[df2017$chapter==1 & df2017$subcat=="" & df2017$sector=="CROPS" & df2017$subrowId<3, c(1,2,3,5,7)]
#convert values to integer data type
df2017$value <- as.integer(gsub(',', '', df2017$value))
#subrowID - 1 indicates num of operations - 2 indicates acreage
#shiny UI
ui <- fluidPage(
titlePanel("US Agriculure by Product"),
h6("Visualization by Hunter Dubbs for CIT460 at Penn College"),
sidebarLayout(
sidebarPanel(
helpText("Select an agricultural product"),
selectInput("product", h3("Product"),
choices=list("Total Non-Citrus Fruit"="NON-CITRUS TOTALS",
"Apples"="APPLES",
"Bananas"="BANANAS",
"Cherries"="CHERRIES",
"Peaches"="PEACHES",
"Oranges"="ORANGES",
"Almonds"="ALMONDS",
"Total Vegetables"="VEGETABLE TOTALS",
"Potatoes"="POTATOES",
"Spinach"="SPINACH",
"Tomatoes"="TOMATOES"),
selected="APPLES"
),
radioButtons("chartSelect", h3("Data"),
choices=list("Number of Operations"=1,
"Acreage"=2,
"Operations vs Acreage"=3),
selected=1)
),
mainPanel(
plotOutput(outputId="plotDisp")
)
),
h6("Data courtesy of UDSA : https://www.nass.usda.gov/Publications/AgCensus/2017")
)
#table 36 is vegetables, table 37 is fruits and nuts
server <- function(input, output){
# --- STEP 3 --- Information Extraction --- #
selection <- reactive({
filter(df2017,
table %in% c(36, 37) &
state!="us total" &
description==input$product)
})
output$plotDisp <- renderPlot({
# --- STEP 4 --- Information Presentation --- #
if(input$chartSelect==3){
#acreage vs operations chart
combinedData <- data.frame(
state=selection()$state,
ops=selection()[selection()$subrowId==1, ]$value,
acres=selection()[selection()$subrowId==2, ]$value
)
ggplot(combinedData, aes(x=ops, y=acres)) +
geom_point(aes(col="red")) +
labs(title=paste("Acres vs Number of Operations for", input$product, "in States"),
subtitle="2017 Census of Agriculture", x="Number of Operations", y="Acreage")
}else{
#acreage or operations chart
if(input$chartSelect==1){
prefix <- "Number of Operations"
}else{
prefix <- "Acres"
}
ggplot(selection()[selection()$subrowId==input$chartSelect, ], aes(map_id=state)) +
geom_map(aes(fill=value), map=fifty_states) +
expand_limits(x=fifty_states$long, y=fifty_states$lat) +
coord_map() +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="", y="") +
theme(legend.position="right", panel.background=element_blank()) +
labs(title=paste(prefix, "for", input$product, "by State"),
subtitle="2017 Census of Agriculture", caption="Gray states indicate non-zero values not disclosed by the USDA.")
}
})
}
shinyApp(ui, server)
